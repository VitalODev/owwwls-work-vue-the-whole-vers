Object.defineProperty(exports, "__esModule", { value: true });
var renderPath_1 = require("./renderPath");
var math_1 = require("../utilities/math");
var errors_1 = require("../utilities/errors");
var normalizePaths_1 = require("./normalizePaths");
var objects_1 = require("../utilities/objects");
var createNumberArray_1 = require("../utilities/createNumberArray");
var constants_1 = require("../constants");
var defaultOptions = {
    addPoints: 0,
    optimize: constants_1.FILL,
    origin: { x: 0, y: 0 },
    precision: 0
};
function interpolatePath(paths, options) {
    options = objects_1.fillObject(options, defaultOptions);
    if (!paths || paths.length < 2) {
        errors_1.raiseError('invalid arguments');
    }
    var hlen = paths.length - 1;
    var items = Array(hlen);
    for (var h = 0; h < hlen; h++) {
        items[h] = getPathInterpolator(paths[h], paths[h + 1], options);
    }
    var formatter = !options.precision ? math_1.round : function (n) { return n.toFixed(options.precision); };
    return function (offset) {
        var d = hlen * offset;
        var flr = math_1.min(math_1.floor(d), hlen - 1);
        return renderPath_1.renderPath(items[flr]((d - flr) / (flr + 1)), formatter);
    };
}
exports.interpolatePath = interpolatePath;
function getPathInterpolator(left, right, options) {
    var matrix = normalizePaths_1.normalizePaths(left, right, options);
    var n = matrix[0].length;
    return function (offset) {
        if (math_1.abs(offset - 0) < math_1.EPSILON) {
            return left.path;
        }
        if (math_1.abs(offset - 1) < math_1.EPSILON) {
            return right.path;
        }
        var results = Array(n);
        for (var h = 0; h < n; h++) {
            results[h] = mixPoints(matrix[0][h], matrix[1][h], offset);
        }
        return results;
    };
}
function mixPoints(a, b, o) {
    var alen = a.length;
    var results = createNumberArray_1.createNumberArray(alen);
    for (var i = 0; i < alen; i++) {
        results[i] = a[i] + (b[i] - a[i]) * o;
    }
    return results;
}
exports.mixPoints = mixPoints;
