export declare type Matrix = [FloatArray[], FloatArray[]];
export declare type Func<T1, T2> = (input: T1) => T2;
export interface IRenderer<T> {
    (offset: number): T;
}
export interface IPath {
    path: string;
    data: IPathSegment[];
}
export interface IPathSegment {
    d: FloatArray;
    w: number;
    h: number;
    x: number;
    y: number;
    p: number;
}
export interface IPathElement {
    tagName: 'PATH';
}
export interface IParseContext {
    x: number;
    y: number;
    cx?: number;
    cy?: number;
    lc?: string;
    c?: string;
    t?: FloatArray;
    s: FloatArray[];
    p?: number[];
}
export interface InterpolateOptions {
    origin?: IOrigin;
    optimize?: 'none' | 'fill';
    addPoints?: number;
    precision?: number;
}
export interface FloatArray {
    length: number;
    [index: number]: number;
    slice(startIndex: number): FloatArray;
}
export interface IFloatArrayConstructor {
    new (count: number): FloatArray;
}
export interface IOrigin {
    x: number;
    y: number;
    absolute?: boolean;
}
